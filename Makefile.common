# name of executable

ELF=$(notdir $(CURDIR)).elf                    

# Tool path

TOOLROOT=/home/konrad/arm_toolchain/gcc-arm-none-eabi-4_9-2015q2/bin

# Library path

LIBROOT=/home/konrad/Programming/eb/CMSIS

# Tools

CC=$(TOOLROOT)/arm-none-eabi-gcc
LD=$(TOOLROOT)/arm-none-eabi-gcc
AR=$(TOOLROOT)/arm-none-eabi-ar
AS=$(TOOLROOT)/arm-none-eabi-as

# Code Paths

INCLUDE=$(LIBROOT)/Include
CORE=$(LIBROOT)/CORE

# Search path for core files

vpath %.c $(CORE)
vpath %.s $(CORE)

#  Processor specific
#
LDSCRIPT=$(CORE)/STM32F100XB_FLASH.ld
STARTUP=startup_stm32f100xb.o system_stm32f1xx.o 
PTYPE=STM32F10X_MD_VL
# Compilation Flags

LDFLAGS+= -T$(LDSCRIPT) -mcpu=cortex-m3 -mthumb
LDFLAGS+= -specs=nosys.specs 
LDFLAGS+= -Wall -Wl,-gc-sections,-u,main
CFLAGS+= -mcpu=cortex-m3 -mthumb
CFLAGS+= -Os -g3 -Wall -std=gnu99 
CFLAGS+= -fdata-sections
CFLAGS+= -I$(CORE) -I$(INCLUDE) -I.
CFLAGS+= -D$(PTYPE)
# Build executable (-lm for math lib)

$(ELF) : $(OBJS)
	$(LD) $(LDFLAGS) -o $@ $(OBJS)  $(LDLIBS)  

# compile and generate dependency info

%.o: %.c
	$(CC) -c $(CFLAGS) $< -o $@
	$(CC) -MM $(CFLAGS) $< > $*.d

%.o: %.s
	$(CC) -c $(CFLAGS) $< -o $@

clean:
	rm -f $(OBJS) $(OBJS:.o=.d) $(ELF) startup_stm32f* $(CLEANOTHER)

debug: $(ELF)
	armeb-unknown-eabi-gdb $(ELF)


# pull in dependencies

-include $(OBJS:.o=.d)




